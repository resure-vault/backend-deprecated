services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: secured-bun-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - PROD_DB_HOST=postgres
      - PROD_DB_PORT=5432
      - PROD_DB_NAME=sm
      - PROD_DB_USER=secured
      - PROD_DB_PASSWORD=notsecured
      - JWT_SECRET=your-very-secure-jwt-secret-change-this
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=notsecured
      - REDIS_DB=0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - secured-network

  postgres:
    image: postgres:15-alpine
    container_name: secured-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sm
      POSTGRES_USER: secured
      POSTGRES_PASSWORD: notsecured
      POSTGRES_TIMEZONE: UTC
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secured -d sm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secured-network

  redis:
    image: redis:7-alpine
    container_name: secured-redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "notsecured"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secured-network

volumes:
  postgres_data:
  redis_data:

networks:
  secured-network:
    driver: bridge
